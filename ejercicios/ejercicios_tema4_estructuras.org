#+TITLE: Ejercicios del Tema 4
#+SUBTITLE: Estructuras
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema4_estructuras.pdf

* Distancia entre puntos

Escribe un programa que calcule la distancia entre dos puntos introducidos por el usuario, y que decida el cuadrante en el que está localizado cada punto. Este programa debe emplear la estructura punto capaz de almacenar dos coordenadas x e y de tipo float. 

#+BEGIN_SRC C :exports code  :exports code
#include <stdio.h>
#include <math.h>

typedef struct
{
  float x;
  float y;
} punto;

int main()
{
  punto a, b;
  float d;
  int cuadrante;

  printf("Escribe las coordenadas del punto 1:\n");
  scanf("%f %f", &a.x, &a.y);

  printf("Escribe las coordenadas del punto 2:\n");
  scanf("%f %f", &b.x, &b.y);

  if (a.x > 0 && a.y > 0)
  {
    cuadrante = 1;
  }
  else if (a.x < 0 && a.y > 0)
  {
    cuadrante = 2;
  }
  else if (a.x < 0 && a.y < 0)
  {
    cuadrante = 3;
  }
  else if (a.x > 0 && a.y < 0)
  {
    cuadrante = 4;
  }
  else 
  {
    cuadrante = 0; // Punto en un eje   
  }
 
  printf("El punto 1 está en el cuadrante %i.\n", cuadrante);
  
  if (b.x > 0 && b.y > 0)
  {
    cuadrante = 1;
  }
  else if (b.x < 0 && b.y > 0)
  {
    cuadrante = 2;
  }
  else if (b.x < 0 && b.y < 0)
  {
    cuadrante = 3;
  }
  else if (b.x > 0 && b.y < 0)
  {
    cuadrante = 4;
  }
  else 
  {
    cuadrante = 0; // Punto en un eje   
  }

  printf("El punto 2 está en el cuadrante %i.\n", cuadrante);

  printf("La distancia entre los puntos es %f.\n", sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2)));
  
  return 0;
}
#+END_SRC

* Vector de puntos

Realiza un programa que pida al usuario un número =n= de puntos indicando sus coordenadas (estructura =punto= definida en el ejercicio anterior) y los introduzca en un vector. El programa debe indicar el total de puntos que hay en cada uno de los cuadrantes.

Ejemplo de funcionamiento:

#+BEGIN_EXAMPLE
Indique el numero de puntos a introducir:
3
Introduzca x1, y1:
3 8
Introduzca x2, y2:
-1 8
Introduzca x3, y3:
-3 3
El total de puntos por cuadrante es:
   Cuadrante 1 = 1
   Cuadrante 2 = 2
   Cuadrante 3 = 0
   Cuadrante 4 = 0
#+END_EXAMPLE

#+BEGIN_SRC C
#include <stdio.h>

typedef struct
{
  float x;
  float y;
} punto;

int main()
{
  int i, n;
  int iCuad; // indice auxiliar para cuadrantes
  // Vector contador de puntos por cuadrante. 
  // El primer elemento se usa para puntos en ejes y origen
  int vCuad[5] = {0, 0, 0, 0, 0}; 
  
  // No sabemos cuantos puntos son, definimos nosotros un limite que seran 100 puntos
  punto puntos[100]; //Vector suficientemente grande. Es un vector de
                     //estructuras, cuyos componentes son de tipo punto.

  printf("Dime el número de puntos (< 100).\t");
  scanf("%i", &n);
  
  // Pido datos al usuario
  for (i = 0; i < n; i++)
  {
    printf("Punto %d:\n", i + 1);
    // Relleno el vector de puntos
    scanf("%f %f", &puntos[i].x, &puntos[i].y);      
  }

  // Se recorre el vector 
  for (i = 0; i < n; i++)
  {
    if (puntos[i].x > 0 && puntos[i].y > 0)
    {
      iCuad = 1;
    }
    else if (puntos[i].x < 0 && puntos[i].y > 0)
    {
      iCuad = 2;
    }
    else if (puntos[i].x < 0 && puntos[i].y < 0)
    {
      iCuad = 3;
    }
    else if (puntos[i].x > 0 && puntos[i].y < 0)
    {
      iCuad = 4;
    }
    else 
    {
      iCuad = 0; // Punto en un eje   
    }  
    
    // y actualizo el vector contador
    vCuad[iCuad] = vCuad[iCuad] + 1;
  }

  // Finalmente muestro los resultados
  printf("Puntos por cuadrante:\n");
  for (i = 0; i < 5; i++)
  {
    printf("\t Cuadrante %d: %d \n", i, vCuad[i]);
  }
  
  return 0;
}
#+END_SRC


* Distancia entre dos instantes temporales

Escribe un programa que calcule la distancia temporal entre dos instantes. Este programa debe emplear la estructura =tiempo= (horas, minutos, segundos) para almacenar la información de cada instante. 
Por ejemplo, si la estructura =t1= representa el instante =3:45:15= y la estructura =t2= representa el instante =9:44:03=, la distancia temporal debe ser la estructura =5:58:48=. 
Es importante tener en cuenta la posibilidad de que entre =t1= y =t2= se encuentre la medianoche.


#+BEGIN_SRC C
#include <stdio.h>

typedef struct
{
  int hour, min, sec;
} tiempo;


int main()
{
  tiempo t1 = {3, 45, 15};
  tiempo t2 = {9, 44, 3};
  tiempo dt;
  
  //Restamos segundos, teniendo en cuenta restas negativas
  if (t1.sec > t2.sec)
  {
    t2.min = t2.min - 1;
    t2.sec = t2.sec + 60;
  }

  dt.sec = t2.sec - t1.sec;

  //Idem para minutos
  if (t1.min > t2.min)
  {
    t2.hour = t2.hour - 1;
    t2.min = t2.min + 60;
  }
  dt.min = t2.min - t1.min;

  //Idem para horas, peor ahora t2 puede corresponder al dia siguiente
  if (t1.hour > t2.hour)
  {
    t2.hour += 24;
  }
  dt.hour = t2.hour - t1.hour;
	
  printf("%i:%i:%i", dt.hour, dt.min, dt.sec);
  
  return 0;
}
#+END_SRC

#+RESULTS:
: 5:58:48


* Contacto

Define la estructura =contacto= con los campos nombre, primer apellido, segundo apellido, y fecha de nacimiento. Esta estructura emplea internamente la estructura =fecha= para almacenar la fecha de nacimiento (día, mes y año).

Escribe un programa que lea los datos de dos contactos, y los almacene en un vector de estructuras. A continuación debe imprimir los datos del que sea más mayor, o ambos si tienen la misma edad.


#+BEGIN_SRC C :exports code
#include <stdio.h>

typedef struct
{
  int d, m, a;
} fecha;

typedef struct
{
  char nombre[50];
  char apellido1[50];
  char apellido2[50];
  fecha fechaNac;
} contacto;

int main()
{
  int i, iComp;
  // Se puede usar un vector de ejemplo para probar rapidamente el programa:
  // Descomentar estas lineas y no pedir al usuario datos para una prueba rápida
  /*contacto contactos[2] = { 
    {"N1", "A1", "B1", {10, 2, 2010}}, 
    {"N2", "A2", "B2", {11, 2, 2010}} 
  };   */
  
  contacto contactos[2]; // Vector que almacena los contactos

  //  Recorremos el vector rellenando los datos de cada contacto
  for (i = 0; i < 2; i++)
  {
    printf("Datos del contacto %d:\n", i + 1);
    printf("Nombre: \t");
    scanf("%s", contactos[i].nombre);
    printf("Primer apellido: \t");
    scanf("%s", contactos[i].apellido1);
    printf("Segundo apellido: \t");
    scanf("%s", contactos[i].apellido2);
    printf("Fecha de nacimiento (dia/mes/año): \t");
    scanf("%i/%i/%i", &contactos[i].fechaNac.d, &contactos[i].fechaNac.m, &contactos[i].fechaNac.a);
  }

  // Comparamos las fechas de los contactos
  if (contactos[0].fechaNac.a < contactos[1].fechaNac.a)
  {
  	iComp = -1;
  }
  else if (contactos[0].fechaNac.a > contactos[1].fechaNac.a)
  {
    iComp = 1;
  }
  else
  {
    if (contactos[0].fechaNac.m < contactos[1].fechaNac.m)
    {
      iComp = -1;
    }
    else if (contactos[0].fechaNac.m > contactos[1].fechaNac.m)
    {
      iComp = 1;    	
    }
    else
    {
      if (contactos[0].fechaNac.d < contactos[1].fechaNac.d)
      {
        iComp = -1;
      }
      else if (contactos[0].fechaNac.d > contactos[1].fechaNac.d)
      {
        iComp = 1;    	
      }
      else
      {
        iComp = 0;    	
      }
    }
  }  
  // Dependiendo del resultado imprimimos el que corresponda
  switch(iComp)
  {
    case -1:
      printf("%s %s %s\t", contactos[0].nombre, contactos[0].apellido1, contactos[0].apellido2);
      printf("(%i/%i/%i) \n", contactos[0].fechaNac.d, contactos[0].fechaNac.m, contactos[0].fechaNac.a);   
      break;
    case 1:
      printf("%s %s %s\t", contactos[1].nombre, contactos[1].apellido1, contactos[1].apellido2);
      printf("(%i/%i/%i) \n", contactos[1].fechaNac.d, contactos[1].fechaNac.m, contactos[1].fechaNac.a);
      break;
    case 0:
      printf("%s %s %s\t", contactos[0].nombre, contactos[0].apellido1, contactos[0].apellido2);
      printf("(%i/%i/%i) \n", contactos[0].fechaNac.d, contactos[0].fechaNac.m, contactos[0].fechaNac.a); 
      printf("%s %s %s\t", contactos[1].nombre, contactos[1].apellido1, contactos[1].apellido2);
      printf("(%i/%i/%i) \n", contactos[1].fechaNac.d, contactos[1].fechaNac.m, contactos[1].fechaNac.a);      
      break;
  }
  
  return 0;  
}
#+END_SRC
