#+TITLE: Ejercicios del Tema 7 - Asignación dinámica de memoria
#+SUBTITLE: Asignación dinámica de memoria
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema7_asig.pdf


* Rellenar vector
Escribe un programa que permita al usuario rellenar un vector de dimensión variable. En primer lugar, el programa pregunta al usuario el número de elementos que tendrá el vector. A continuación, empleando asignación dinámica de memoria, el programa reservará memoria para este vector, y solicitará al usuario los valores del mismo. Finalmente, el programa mostrará el contenido de este vector.

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

int main()
{
  int i, n;
  int *p;

  printf("Nº datos? ");
  scanf("%i", &n);
  
  // Reservamos n direcciones de memoria del tamaño de un int. El
  // resultado de malloc es la dirección inicial, que almacenamos en
  // un puntero. Este puntero equivale al elemento 0 de un vector de n
  // elementos.
  p = malloc(sizeof(int) * n);
  
  // Comprobamos que hay memoria disponible, y comunicamos error en su caso
  if (p == NULL)
  {
    printf("Error de memoria.\n");
    exit(-1);
  }
  
  // Si todo ha ido bien recorremos el puntero-vector para rellenarlo de contenido
  for(i = 0; i < n; i++) 
  {
    scanf("%d", p + i);
  }

  // Y ahora lo mostramos
  for(i = 0; i < n; i++) 
  {
    printf("%d", *(p + i));
  }
  // Una vez terminado, liberamos la memoria
  free(p);

  return 0;
}
#+END_SRC




* Cuenta letras

Escribe un programa que analice el texto almacenado en un fichero representando el número de vocales que contiene mediante líneas de asteriscos. Este programa debe estar construido de manera similar al ejercicio planteado en el capítulo 4, empleando dos funciones, cuentaLetra y pintaAsteriscos.

Puedes usar el fichero lorem_ipsum.txt como ejemplo. 

Realice el programa usando asignación dinámica de memoria.

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h> // malloc y free

int cuentaLetra(char x, char texto[]);
void pintaAsteriscos(int n);

int main()
{
  FILE *f;
  char vocales[5] = {'a', 'e', 'i', 'o', 'u'};
  char *texto; //Puntero a una cadena de caracteres
  int fSize; // Tamaño del fichero de texto
  int i = 0, nLetra[5]; //Vector de resultados

  // Abrimos el fichero para leer
  f = fopen("lorem_ipsum.txt", "r");
  if (f == NULL) {
    printf("Error al abrir el archivo origen.\n");
    return -1;
  }
  else
  {
    // Calculamos el tamaño del fichero
    fseek(f, 0, SEEK_END);
    fSize = ftell(f);
    fseek(f, 0, SEEK_SET);
    // Reservamos memoria para leer este fichero, y obtenemos un
    // puntero para almacenar los caracteres. Podemos usar
    // directamente fSize porque 1 carácter ocupa 1 byte
    texto = malloc(fSize);
  
    // Recorremos el fichero leyendo caracter a caracter hasta encontrar EOF
    while (fscanf(f, "%c", &texto[i]) != EOF)
    {
      i++;
    }

    // Cerramos el fichero tras terminar la lectura
    fclose(f);

    // Cuenta las apariciones de cada letra, y almacena resultados en un vector
    for (i = 0; i < 5; i++)
    {
      nLetra[i] = cuentaLetra(vocales[i], texto);
    }
    for (i = 0; i < 5; i++)
    { 
      // Recorre el vector de resultados, y pinta asteriscos correspondientes a cada letra
      printf("%c: ", vocales[i]);
      pintaAsteriscos(nLetra[i]);
      printf("\n");
    }
    // Liberamos la memoria asociada a la cadena de caracteres
    free(texto);

    return 0;
  }
}

int cuentaLetra(char x, char texto[])
{
  int i = 0, n = 0;

  while (texto[i] != '\0')
  {
    if (texto[i] == x)
    {
      n++; // Contador de apariciones
    }

    i++;
  }
  return n;
}

void pintaAsteriscos(int n)
{
  int i;
  if (n > 0)
  {
    for (i = 1; i <= n; i++)
    {
      printf("*");
    }
  }  
}

#+END_SRC



* Máximo, mínimo y promedio de variables

El fichero =aranjuez.csv= es un fichero que almacena valores numéricos en formato CSV (valores separados por comas). Contiene 4 columnas (variables) y muchas filas.

Suponga que no puede conocer a priori el número de filas del fichero.

Escribe un programa que lea este fichero almacenando el contenido de cada columna en un vector. A continuación, el programa debe calcular el valor máximo, mínimo y promedio de cada vector empleando una función separada para cada cálculo (/revisa el ejercicio "Máximo, mínimo y promedio de una colección de números" del capítulo 4/). Finalmente, el programa mostrará el resultado en pantalla y escribirá estos cálculos en un fichero con un formato similar al siguiente:

| Variable | Min | Max | Media |
| Temp     | XX  | XX  | XX    |
| Humedad  | XX  | XX  | XX    |
| Viento   | XX  | XX  | XX    |
| Rad      | XX  | XX  | XX    |


#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

double maximo(double x[], int n);
double minimo(double x[], int n);
double promedio(double x[], int n);

int main()
{
  FILE *pf, *wf;
  int i, N;
  char c;
  // Defino un vector para cada variable a leer del fichero
  double *TempAvg, *HumidAvg, *WindAvg,*Radiation;
  double minTa, minH, minW, minR;
  double maxTa, maxH, maxW, maxR;
  double promTa, promH, promW, promR;
  
  pf = fopen("aranjuez.csv", "r");
  if (pf == NULL)
  {
    printf("Error al abrir el fichero");
    return -1;
  }
  else
  {
    //Contamos el número de líneas
    while(fscanf(pf, "%c", &c) != EOF)
    {
      if(c == '\n')
      {
        N++;
      }
      
    }                

    //Volvemos a la posición inicial del fichero
    fseek(pf, 0, SEEK_SET);

    //Reservamos memoria para cada puntero
    TempAvg = malloc(sizeof(double) * N);
    HumidAvg = malloc(sizeof(double) * N);
    WindAvg = malloc(sizeof(double) * N);
    Radiation = malloc(sizeof(double) * N);

    if (TempAvg == NULL || HumidAvg == NULL || WindAvg == NULL || Radiation == NULL)
	  {  
	    printf("Error de memoria.\n");
	    exit(-1);
	  }
    
    // Leemos el fichero línea a línea
    for (i = 0; i < N; i++)
    {
      // El formato es de números separados por comas
	    fscanf(pf, "%lf,%lf,%lf,%lf", &TempAvg[i], &HumidAvg[i], &WindAvg[i], &Radiation[i]);
	  }
    // Cerramos el fichero
    fclose(pf);
    
    // Calcula el minimo, maximo y promedio usando las funciones
    minTa = minimo(TempAvg, N);
    maxTa = maximo(TempAvg, N);
    promTa = promedio(TempAvg, N);

    minH = minimo(HumidAvg, N);
    maxH = maximo(HumidAvg, N);
    promH = promedio(HumidAvg, N);

    minW = minimo(WindAvg, N);
    maxW = maximo(WindAvg, N);
    promW = promedio(WindAvg, N);

    minR = minimo(Radiation, N);
    maxR = maximo(Radiation, N);
    promR = promedio(Radiation, N);

    // Mostramos resultados
    printf("Variable: \t Min \t Max \t Prom \n");
    printf("Temp: \t %lf \t %lf \t %lf \n", minTa, maxTa, promTa);
    printf("Humedad: \t %lf \t %lf \t %lf \n", minH, maxH, promH);
    printf("Viento: \t %lf \t %lf \t %lf \n", minW, maxW, promW);
    printf("Radiacion: \t %lf \t %lf \t %lf \n", minR, maxR, promR);

    // Escribimos fichero
    wf = fopen("resumen.txt", "w");
      
    fprintf(wf, "Variable: \t Min \t Max \t Prom \n");
    fprintf(wf, "Temp: \t %lf \t %lf \t %lf \n", minTa, maxTa, promTa);
    fprintf(wf, "Humedad: \t %lf \t %lf \t %lf \n", minH, maxH, promH);
    fprintf(wf, "Viento: \t %lf \t %lf \t %lf \n", minW, maxW, promW);
    fprintf(wf, "Radiacion: \t %lf \t %lf \t %lf \n", minR, maxR, promR);
    
    fclose(wf);
      
    return 0;
  }
}

double maximo(double x[], int n)
{
  int i;
  //El maximo inicial es el primer elemento
  double mx = x[0]; 

  // Busca en el vector algún valor mayor
  for (i = 1; i < n; i++)
  {
    if (x[i] > mx)
    {
      // y lo sustituye si lo encuentra      
      mx = x[i]; 
    } 
  }
    
  return mx;
}

double minimo(double x[], int n)
{
  int i;
  double mn = x[0];

  for (i = 1; i < n; i++)
  {
    if (x[i] < mn) 
    {
      mn = x[i];
    }
  }
    
  return mn;
}

double promedio(double x[], int n)
{
  int i;
  double media = 0.0;

  for (i = 0; i < n; i++)
  {
    media = media + x[i];
  }
    
  return media / n;
}

#+END_SRC

#+RESULTS:
| Variable:  |    Min |   Max |      Prom |
| Temp:      | -5.309 | 30.68 | 14.404856 |
| Humedad:   |  19.89 | 100.0 |  62.16039 |
| Viento:    |    0.0 |  8.26 |  1.170742 |
| Radiacion: |    0.0 | 32.74 | 16.666658 |



* Estaciones agroclimáticas 

Escriba un programa capaz de procesar información básica de unas estaciones agroclimáticas. Aunque lo habitual es que la información esté disponible en un fichero, en este ejercicio la información será introducida por teclado. En primer lugar, el usuario introducirá el número de estaciones disponibles. A continuación introducirá la información de cada estación separando por punto y coma los datos. 

La información de una estación es: identificador numérico, longitud, latitud, y altitud.  A partir de esta información el programa debe determinar:
- La estación (representada por su identificador, su longitud y su latitud) situada más al norte (máximo valor de latitud).
- El valor promedio de la altura de todas las estaciones.

El programa terminará mostrando estos resultados en pantalla.

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

int maximo(float *x, int n);
float promedio(float *x, int n);

int main()
{
  int N, i;
  int *estacion;
  float *lat, *lon, *alt;
  int iLatMax;
  float altProm;

  scanf("%d", &N);
  // Reservo memoria para las variables teniendo en cuenta el tipo de datos y el número de estaciones
  estacion = malloc(N * sizeof(int));
  if (estacion == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  lat = malloc(N * sizeof(float));
  if (lat == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  lon = malloc(N * sizeof(float));
  if (lon == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }

  alt = malloc(N * sizeof(float));
  if (alt == NULL) {
    printf("Error: memoria no disponible.\n");
    exit(-1);
  }
  // Leo datos y almaceno información en variables
  for (i = 0; i < N;i++)
  {
    scanf("%i;%f;%f;%f", estacion + i, lon + i, lat + i, alt + i);
  }
  // Localizo máximos y mínimos.
  iLatMax = maximo(lat, N);
  altProm = promedio(alt, N);

  // Escribo resultados en pantalla
  printf("%d %f %f\n%f", *(estacion + iLatMax), *(lon + iLatMax), *(lat + iLatMax), altProm);

  // Libera punteros
  free(estacion);
  free(lat);
  free(lon);
  free(alt);

  return 0;
}

int maximo(float *x, int n)
{
  int i, iMax = 0; //El maximo inicial es el primer elemento
  // Busca en el vector algún valor mayor
  for (i = 1; i < n; i++)
  {
    if (*(x + i) > *(x + iMax)) 
    {
      iMax = i; // y lo sustituye si lo encuentra
    }
  }
    
  return iMax;
}

float promedio(float *x, int n)
{
  int i;
  float media = 0.0;

  for (i = 0; i < n; i++)
  {
    media = media + *(x + i);
  }
    
  return media / n;
}
#+END_SRC
