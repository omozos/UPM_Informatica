#+TITLE: Ejercicios del Tema 4
#+SUBTITLE: Vectores
#+AUTHOR: 
#+DATE: 
#+SETUPFILE: config.org
#+PROPERTY: header-args :exports none
#+EXPORT_FILE_NAME: ejercicios_tema4_vectores.pdf


* Fibonacci

Escribe un programa que genere los 20 primeros términos de la serie de Fibonacci y los almacene en un vector. 

#+BEGIN_SRC C 
#include <stdio.h>
#define N 20

int main ()
{
  int fib[N], i;
  fib[0] = 0;
  fib[1] = 1;
  //Genera los números y los almacena en el vector
  for (i = 2; i < N; ++i)
  {
    fib[i] = fib[i-2] + fib[i-1];
  }
    
  // Muestra el contenido del vector
  for (i = 0; i < N; ++i)
  {
    printf("%i\n", fib[i]);
  }
    
  return 0;
}
#+END_SRC


* Producto escalar de vectores

Escribe un programa que realice el producto escalar de dos vectores. Use los dos vectores siguientes como ejemplo.

#+BEGIN_SRC C  :exports code
  float v1[5] = {1, 34, 32, 45, 34};
  float v2[5] = {12, -3, 34, 15, -5};
#+END_SRC

#+BEGIN_SRC C 
#include <stdio.h>
int main()
{
  float v1[5] = {1, 34, 32, 45, 34};
  float v2[5] = {12, -3, 34, 15, -5};
  float prod = 0;
  int i;

  for(i=0; i<5; i++)
  {
    prod = prod + v1[i] * v2[i];
  }
    
  printf("El producto escalar es: %f\n", prod);
  
  return 0;
}
#+END_SRC

#+RESULTS:
: El producto escalar es: 1503.000000


* Distancia 

- Escribe un programa que calcule la distancia entre dos puntos del plano utilizando vectores de dimensión 2 para codificar los puntos. 

#+BEGIN_SRC C 
#include <stdio.h>
#include <math.h>

int main()
{
  float p1[2], p2[2];
  float d;
        
  printf("Primer punto\n");
  scanf("%f %f", &p1[0], &p1[1]);
        
  printf("Segundo punto\n");
  scanf("%f %f", &p2[0], &p2[1]);

  d = sqrt(pow(p1[0] - p2[0], 2) + pow(p1[1] - p2[1], 2));
  
  printf("La distancia entre los puntos es %f\n", d);

  return 0;
}

#+END_SRC


* Números primos

Realiza un programa que calcule los números primos comprendidos entre el 1 y el 300 y los almacene en un vector.  

Cuando se complete el cálculo el programa debe mostrar el contenido del vector. 

#+BEGIN_SRC C 
#include <stdio.h>

#define N 300

int main()
{
  int p;   // Numero a comprobar
  int i;   // Indice de bucles
  int ind_primo = 2;       // Indice del vector primos, que indica la primera posicion libre
  int primos[N] = {2, 3};  // Vector de primos, inicializo los dos primeros, y el resto quedan a 0
    
  int esPrimo; // Booleano para indicar si es primo o no

  // Empiezo comprobando desde el 5
  for (p = 5; p <= N; p++) 
  { 
    // Inicialmente es primo
    esPrimo = 1;
    i = 0;
    // Con while comprobamos el resto de la division del numero p
    // con todos los primos anteriores
    while(esPrimo && i < ind_primo)
    {
      // Si alguno de los restos es cero
  	  if (p % primos[i] == 0)
      {
	      // el numero p deja de ser primo, y salgo del while
  	    esPrimo = 0;
      }
	    // En caso contrario sigo avanzando
  	  i++;
  	}
    // Si salgo del bucle sin haber encontrado un resto igual a
    // cero, esPrimo sigue valiendo 1, lo que indica que se mantiene
    // la condicion de ser primo
    if (esPrimo)
    { 
      // y por tanto debo almacenar ese numero en el vector
	    primos[ind_primo] = p;
	    //y avanzar el indice del vector
	    ind_primo = ind_primo + 1;
    }
  }
  // Muestro el resultado en pantalla
  for (i = 0; i < ind_primo; i++)
  {
    printf ("%i ", primos[i]);
  }
    
  printf ("\n");
  return 0;
}
#+END_SRC


* Máximo, mínimo y promedio de una colección de números
Escribe un programa que calcule y muestre en pantalla el máximo, mínimo y promedio de una colección de 10 valores de tipo entero que se introducen por teclado. 

#+BEGIN_SRC C 
#include <stdio.h>

#define N 10

int main()
{

  int vector[N], i;
  int min, max;
  float media;

  printf("Escribe %d números enteros.\n", N);
  // Rellena los valores del vector
  for (i = 0; i < N; i++)
  {
    scanf("%i", &vector[i]);
  }
    
  // Máximo
  max = vector[0];  // Inicialmente, consideramos que el maximo inicial es el primer elemento
  // Se busca en el vector si algún valor es mayor
  for (i = 1; i < N; i++)
  {
    if (vector[i] > max)
    {
      // y se sustituye el valo de max si lo encuentra
      max = vector[i]; 
    } 
  }

  // Mínimo
  min = vector[0];  // Inicialmente, consideramos que el minimo inicial es el primer elemento
  for (i = 1; i < N; i++)
  {
    if (vector[i] < min) 
    {
      min = vector[i];
    }
  }

  // Promedio
  media = 0.0;
  for (i = 0; i < N; i++)
  {
    media = media + vector[i];
  }
  media =  media / N;

  printf("El máximo es %d, el mínimo es %d, y el promedio es %02f.\n", max, min, media);

  return 0;
}
#+END_SRC

* Ordenamiento de vectores

- Escribe un programa que ordene de menor a mayor los elementos de un vector de 5 elementos. Los valores del vector serán introducidos por teclado, y el vector ordenado será mostrado por pantalla. 

#+BEGIN_SRC C 
#include <stdio.h>

#define N 5

int main()
{
  int datos[N];
  int i, j, aux;
  
  //Primero pedimos los datos
  for(i = 0; i < N; i++)
  {
    printf("Dato %d: ", i + 1);
    scanf("%i", &datos[i]);
  }
  
  //Ahora lo ordenamos
  for(i = 0; i < N - 1; i++)
  {
    // Comparamos cada elemento con el siguiente
    for(j = i + 1; j < N; j++)
    {
      if (datos[i] > datos[j])
      {
        // Si es mayor intercambiamos el contenido de los dos elementos
        aux = datos[i]; //Necesitamos una variable auxiliar de almacenamiento temporal
        datos[i] = datos[j];
        datos[j] = aux;
      }
    }
  }
  
  //sacamos el vector por pantalla
  printf("Vector ordenado: ");
  for(i = 0; i < 5; i++)
  {
    printf("%i ", datos[i]);
  }
    
  return 0;
}
#+END_SRC

#+RESULTS:
: Vector: 1 12 23 45 50

