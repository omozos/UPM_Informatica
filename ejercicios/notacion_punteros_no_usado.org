#+BEGIN_SRC C
// Solución con notación de punteros
#include <stdio.h>

int sumaVector(int *vector, int n, int *max, float *media);

int main()
{
  int vals[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
  int suma, max;
  float media;
  
  suma = sumaVector(vals, 9, &max, &media);

  printf("La suma es %i.\n", suma);
  printf("La media es %f.\n", media);
  printf("El valor maximo del vector es %i.\n", max);
    
  return 0;
}

int sumaVector(int *vector, int n, int *max, float *media)
{
  int i, suma = 0;
  *max = vector[0];
  for (i = 0; i < n; i++)
  {
    suma = suma + *(vector + i);	
    if(*(vector + i) > *max)
    {
      *max = *(vector + i); 
    }
  }
  *media = ((float)suma) / n;
  
  return suma;
}
#+END_SRC

#+RESULTS:
: La suma es 45.


#+BEGIN_SRC C
// Solución con notación de punteros
#include <stdio.h>
#define N 5

void stats(float *vector, int n, float *media, float *max, float *min);

int main()
{
  float vector[N] = {1.0, 2.0, 3.0, 4.0, 5.0};
  float media, max, min;

  stats(vector, N, &media, &max, &min);

  printf("Media %f, Máximo %f, Mínimo %f", media, max, min);

  return 0;
}

  
void stats(float *vector, int n, float *media, float *max, float *min)
{
  float suma = 0;
  float *p;
  float *fin = vector + n;

  // Media
  for (p = vector; p < fin; ++p)
    suma = suma *p;

  ,*media = suma / n;

  // Maximo
  ,*max = vector[0]; //El maximo inicial es el primer elemento
  // Busca en el vector algún valor mayor
  for (p = vector; p < fin; ++p)
    if (*p > *max) *max = *p; // y lo sustituye si lo encuentra

  //Minimo
  ,*min = vector[0];
  for (p = vector; p < fin; ++p)
    if (*p < *min) *min = *p;
}
#+END_SRC

#+RESULTS:

* Longitud de una cadena de caracteres

Diseña un programa que calcule la longitud de una cadena de caracteres usando una función basada en punteros.

#+BEGIN_SRC C :exports code
int stringLength(char string);
#+END_SRC

#+BEGIN_SRC C 
//Solución con notación de punteros
#include <stdio.h>

int stringLength(char *string);

int main()
{
  int len;
  char mensaje[] = "Hello World!";

  len = stringLength(mensaje);
  
  printf("Longitud %i\n", len);

  return 0;
}


int stringLength(char *string)
{
  // p es un puntero movil, que apunta inicialmente al primer caracter
  // de la cadena string
  char *p = string;
  // Movemos el puntero a lo largo de la cadena hasta llegar al final
  while (*p != '\0')
    ++p;
  // La distancia entre el puntero p y string (primer caracter) es el
  // numero de caracteres de la cadena
  return p - string;
}
#+END_SRC

#+RESULTS:
: Longitud 12

#+begin_src C
//Solución con notación de vectores
#include <stdio.h>

int stringLength(char *string);

int main()
{
  int len;
  char mensaje[] = "Hello World!";

  len = stringLength(mensaje);
  
  printf("Longitud %i\n", len);

  return 0;
}


int stringLength(char *string)
{
  // usamos una variable entera para recorrer la cadena
  int i = 0;
  // Nos movemos a lo largo de la cadena hasta llegar al final
  while (string[i] != '\0')
    ++i;
  
  return (i);
}
#+end_src

#+RESULTS:
: Longitud 12




* Copia de cadenas de caracteres

Diseña un programa que copie dos cadenas de caracteres usando una función basada en punteros. Esta función imita el comportamiento de la función =strcpy= de la librería =string.h= (véase el capítulo 4, diapositiva 40).

#+BEGIN_SRC C :exports code
void copyString(char *to, char *from);
#+END_SRC

#+BEGIN_SRC C
//Notación de punteros
#include <stdio.h>

void copyString(char *to, char *from);

int main()
{
  char mensaje1[] = "Hello World!";
  char mensaje2[20];

  copyString(mensaje2, mensaje1);
  
  printf("%s\n", mensaje2);

  return 0;
}

void copyString(char *to, char *from)
{
  while (*from != '\0')
    {
      ,*to = *from;
      to++;
      from++;
    }
  // Añadimos el caracter 0 como cierre de la cadena
  ,*to = '\0';
}
#+END_SRC

#+RESULTS:

#+begin_src C
//Notación de vectores
#include <stdio.h>

int copyString(char *to, char *from);

int main()
{
  char mensaje1[] = "Hello World!";
  char mensaje2[20];

  copyString(mensaje2, mensaje1);
  
  printf("%s\n", mensaje2);

  return 0;
}

int copyString(char *to, char *from)
{
  int i = 0;
  while (from[i] != '\0')
  {
    to[i] = from[i];
    i++;
  } 
  // Añadimos el caracter 0 como cierre de la cadena
  to[i] = '\0';
}
#+end_src

#+RESULTS:
: Hello World!
