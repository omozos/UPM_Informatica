#+TITLE: Tema 7: Punteros
#+DATE:
#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:2

* Definición

** Datos y Memoria

- Los datos de un programa se almacenan en la memoria del ordenador.

- La memoria del ordenador está estructurada en *bytes* (8 bits).

- Cada byte tiene una posición en la memoria (dirección).

#+BEGIN_EXPORT latex
\begin{center}
  \begin{tabular}{ | c | c}
    \cline{1-1}
     & Posición de memoria N \\ \cline{1-1}
     & \\ \cline{1-1}
     & \\ \cline{1-1}
    $\leftarrow$  1 byte $\rightarrow$ & \vdots \\ \cline{1-1}
     & \\ \cline{1-1}
     & Posición de memoria 1 \\ \cline{1-1}
     & Posición de memoria 0 \\ \cline{1-1}
  \end{tabular}
\end{center}
#+END_EXPORT

** Dirección de memoria de una variable
- Ejemplo: un dato =int= ocupa 4 bytes.
#+BEGIN_SRC C
int x;
#+END_SRC

#+BEGIN_EXPORT latex
\begin{center}
  \begin{tabular}{ | c | c}
    \cline{1-1}
     & Dirección\\ \cline{1-1}
     & \\ \hline
     $\uparrow$ & 1245051\\ \cline{1-1}
     & 1245050 \\ \cline{1-1}
     x     & 1245049\\ \cline{1-1}
     $\downarrow$     & \textbf{1245048} \\ \hline
     & \\ \cline{1-1}
  \end{tabular}
\end{center}
#+END_EXPORT

** Operador &

El operador =&= (/ampersand/) aplicado a una variable cualquiera proporciona su dirección de memoria.

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  // No hace falta asignar valor inicial
  // para que la variable
  // tenga dirección de memoria
  int x; 

  printf("La variable x está almacenada en %lli.\n",
	 &x);

  return 0;
}
#+END_SRC

#+RESULTS:
: La variable x está almacenada en 140720658362636.

** ¿Qué es un puntero?

*** Un puntero apunta a una variable
Un *puntero* (/pointer/) es una *variable* (tipo número entero) que contiene la dirección de memoria de una variable: 

- El puntero es una referencia de la variable a la que apunta.

- El valor del puntero es la dirección de memoria de la variable.

- La variable está apuntada por el puntero.

* Uso de punteros
** Declaración de un puntero

Un puntero se declara: 
- Indicando el tipo de datos de la variable a la que apunta.
- Incluyendo un asterisco =*= antes del identificador. 

#+BEGIN_SRC C
int main()
{
  // p1: puntero apuntando a una variable de tipo entero
  int *p1;
  // p2: puntero apuntando a una variable de tipo caracter
  char *p2;
  // p3: puntero apuntando a una variable de tipo real
  float *p3;
  // p4: puntero apuntando a una variable genérica
  void *p4;

  return 0;
}

#+END_SRC

#+RESULTS:

** Un puntero es una variable =int=

- El contenido de una variable puntero es la dirección de memoria, un valor de tipo entero.
- Su tamaño depende del sistema:
  - Sistemas de 32 bits ocupan 4 bytes.
  - Sistemas de 64 bits ocupan 8 bytes.

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int x, *p;
  // sizeof devuelve el numero de bytes de una variable o tipo de datos
  printf("La variable x ocupa %i bytes.\n", 
	 sizeof(x));
  printf("El puntero p ocupa %i bytes.\n",
	 sizeof(p));

  return 0;
}

#+END_SRC

#+RESULTS:
| La | variable | x | ocupa | 4 | bytes. |
| El | puntero  | p | ocupa | 8 | bytes. |



# Local Variables:
# ispell-local-dictionary: "spanish"
# End:

** Asignación

#+BEGIN_SRC C
int main()
{
  int x, y;
  // p1 apunta a x
  int *p1 = &x, *p2, *p3;
  // p2 apunta a y
  p2 = &y;
  // p3 apunta a la misma variable que p1, es decir, x
  p3 = p1;

  return 0;
}
#+END_SRC

** Operador =*=

El operador =*= aplicado a un puntero proporciona el valor de la variable apuntada por el puntero.

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int x = 10, *p;
  // Operador & para obtener la direccion de x
  p = &x;
  // *p y x son lo mismo
  printf("La variable apuntada vale %i",
	 *p);
}
#+END_SRC

** Operaciones con punteros
- La *suma o resta de un entero a un puntero* produce una *nueva localización de memoria*.
- Se pueden *comparar punteros* utilizando expresiones lógicas para *comprobar si  apuntan a la misma dirección de memoria*.
- La *resta de dos punteros* da como resultado el *número de variables entre las dos direcciones*.

* Punteros a vectores

** Punteros y vectores
El identificador de un vector es un puntero /constante/ que apunta al primer elemento del vector.

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int vector[3] = {1, 2, 3};
  int *p;
  // p apunta al primer elemento del vector
  p = &vector[0];
  printf("El primer elemento es %i\n", *p);
  // De forma mas concisa
  p = vector;
  printf("El primer elemento es %i\n", *p);

  return 0;
}
#+END_SRC

** Recorrido de un vector
Podemos recorrer un vector a través de su puntero con sumas y restas

#+BEGIN_SRC C
#include <stdio.h>
int main()
{
  int i, vector[3] = {1, 2, 3};
  int *p, *p1;
  p = vector;
  // p apunta a vector[0].
  printf("%i\t", *p);
  // p + 1 apunta a vector[1]
  p1 = p + 1;
  printf("%i\t", *p1);
  // *(p + 1) es equivalente a v[i + 1]
  printf("%i\t", *(p + 1));
  printf("%i\t", vector[1]);
  return 0;
}
#+END_SRC

#+RESULTS:
| 1 | 2 | 2 | 2 |



** Modificación de un vector
Podemos modificar un vector a través de su puntero

#+BEGIN_SRC C
#include <stdio.h> 
int main(){
  int i, vector[3];
  int *p;
  p = vector;
  //vector[0] = 1
  *p = 1;
  //vector[1] = 2
  *(p + 1) = 2;
  //vector[2] = 3
  *(p + 2) = 3;

  printf("El vector es %i, %i, %i.\n",
	 vector[0], vector[1], vector[2]);
  
  return 0;
}
#+END_SRC

#+RESULTS:
| El vector es 1 | 2 | 3 |


** Aritmética de punteros con vectores
   :PROPERTIES:
   :beamer_opt: plain
   :END:
#+BEGIN_SRC C
#include <stdio.h>
#define N 10

int main(){
  int vector[N] = {1};
  int *pVec, *pFin;
  // Puntero apuntando al segundo elemento
  pVec = vector + 1;
  // Puntero apuntando al ultimo elemento
  pFin = vector + N - 1;
  // Comparamos los punteros para avanzar
  while (pVec <=  pFin)
    { // vector[i] = vector[i - 1] + 1
      *pVec = *(pVec - 1) + 1; 
      printf("%i\t", *pVec);
      ++pVec; // Movemos el puntero por el vector
    }
  return 0;
} 
#+END_SRC

#+RESULTS:
| 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

* Punteros a cadenas de caracteres

** Punteros y cadenas

El identificador de una cadena es un puntero /constante/ que apunta al primer elemento.

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  char letras[3] = {'a', 'b', 'c'};
  char *p;
  // p apunta al primer elemento 
  p = &letras[0];
  printf("El primer elemento es %c\n", *p);
  // De forma mas concisa
  p = letras;
  printf("El primer elemento es %c\n", *p);

  return 0;
}
#+END_SRC

#+RESULTS:
| El | primer | elemento | es | a |
| El | primer | elemento | es | a |

** Recorrido de una cadena

#+BEGIN_SRC C
#include <stdio.h>
int main()
{
  char mensaje[] = "Hola Mundo";
  char *p = mensaje;
  int i = 0;
  // Movemos el puntero por la cadena
  while(*p != '\0')
    {
      printf("%c", *p);
      p++; // Incrementa el puntero para 
    }      // pasar al siguiente caracter
  printf("\n");
}
#+END_SRC

** Aritmética de punteros con cadenas

#+BEGIN_SRC C
#include <stdio.h>

int main(){
  char texto[] = "Hola Mundo";
  char *pChar = texto;

  while (*pChar != '\0')
    ++pChar; // Movemos el puntero por la cadena

  // El identificador "texto" es un puntero que
  // apunta al primer caracter de la cadena.
  // Si lo restamos del puntero movil
  // tenemos el total.
  printf("La cadena tiene %i caracteres.\n",
	 pChar - texto);

  return 0;
}
#+END_SRC

#+RESULTS:
: La cadena tiene 10 caracteres.

* Punteros a estructuras

** Punteros a estructuras
   :PROPERTIES:
   :beamer_opt: plain
   :END:
- Un puntero a una estructura se declara igual que un puntero a un tipo simple.
- Para acceder a un miembro de la estructura se emplea el operador =->=.
#+BEGIN_SRC C
#include <stdio.h>
typedef struct 
{
  int y, m, d;
} fecha;

int main(){
  fecha f = {2000, 10, 15}, *p;
  // p apunta a la estructura
  p = &f;

  printf("%i-%i-%i",
	 p->d, p->m, p->y);

  return 0;
}
#+END_SRC

#+RESULTS:
: 15-10-2000

** Ejemplo
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
typedef struct 
{
  int y, m, d;
} fecha;

int main()
{
  fecha f, *p = &f;
  // Rellenamos la estructura a través de su puntero
  p->d = 15;
  p->m = 10;
  p->y = 2000;

  printf("%i-%i-%i",
	 f.d, f.m, f.y);

  return 0;
}
#+END_SRC

** Ejemplo con scanf
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
typedef struct 
{
  int y, m, d;
} fecha;

int main()
{
  fecha f, *p = &f;
  // Rellenamos la estructura a través de su puntero con
  // scanf. Atención al uso de &.
  scanf("%i", &(p->d));
  scanf("%i", &(p->m));
  scanf("%i", &(p->y));

  printf("%i-%i-%i",
	 f.d, f.m, f.y);

  return 0;
}
#+END_SRC


* Funciones y punteros
** Paso por referencia

- El uso de punteros en funciones permite el *paso por referencia*. De esta forma la función puede acceder (y *modificar*) a la variable original (/sin copia/).

- Las funciones que emplean *vectores y cadenas* como argumentos funcionan con *paso por referencia* (/el identificador de un vector es un puntero/).

** Ejemplo
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
void operaciones (float x, float y,
		  float *s, float *p, float *d);
int main(){
  float a = 1.0, b = 2.0; // Datos
  float suma, producto, division; // Resultados
  operaciones(a, b, &suma, &producto, &division);
  printf("S: %f \t P: %f \t D: %f \t",
	 suma, producto, division);
  return 0;
}
//Funcion con varios resultados
void operaciones (float x, float y,
		  float *s, float *p, float *d)
{// Cada puntero sirve para un resultado
  ,*s = x + y;
  ,*p = x * y;
  ,*d = x / y;
}
#+END_SRC

#+RESULTS:
| Suma: 3.000000 | Producto: 2.000000 | Division: 0.500000 |

* Asignación dinámica de memoria

** =malloc= y =free=

- La *asignación dinámica* de memoria permite definir *objetos (p.ej. vectores) de dimensión variable*.
- La función =malloc= permite asignar, durante la ejecución del programa, un bloque de memoria de n bytes consecutivos para almacenar los datos (devuelve =NULL= si no es posible la asignación)
- La función =free= permite liberar un bloque de memoria previamente asignado.

** Uso de =malloc= y =free=

#+BEGIN_SRC C
int *pInt;
...
// Reservamos la memoria suficiente para almacenar 
// un int y asignamos su dirección a pInt
pInt = malloc(sizeof(int));

// Comprobamos si la asignación 
// se ha realizado correctamente
if (pInt  == NULL) {
      printf("Error: memoria no disponible.\n");
      exit(-1);
}

... // Codigo usando el puntero

free(pInt); // Liberamos memoria al terminar
#+END_SRC

** Ejemplo
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h> //Necesaria para malloc y free
int main () {
  int *vec, i, N = 100;
  vec = malloc(sizeof(int) * N);
  //Comprueba si malloc ha funcionado
  if (vec == NULL) {
      printf("Error: memoria no disponible.\n");
      exit(-1);
    }
  // El resultado es un puntero-vector de N elementos
  for (i = 0; i < N; ++i) 
    vec[i] = i * i; // Rellenamos el puntero-vector
  for (i = 0; i < N; ++i) // Mostramos contenido
    printf("%i \t", *(vec + i));
  free(vec); // Liberamos el puntero-vector
  return 0;
}
#+END_SRC

#+RESULTS:
| 0 | 1 | 4 | 9 | 16 | 25 | 36 | 49 | 64 | 81 | 100 | 121 | 144 | 169 | 196 | 225 | 256 | 289 | 324 | 361 | 400 | 441 | 484 | 529 | 576 | 625 | 676 | 729 | 784 | 841 | 900 | 961 | 1024 | 1089 | 1156 | 1225 | 1296 | 1369 | 1444 | 1521 | 1600 | 1681 | 1764 | 1849 | 1936 | 2025 | 2116 | 2209 | 2304 | 2401 | 2500 | 2601 | 2704 | 2809 | 2916 | 3025 | 3136 | 3249 | 3364 | 3481 | 3600 | 3721 | 3844 | 3969 | 4096 | 4225 | 4356 | 4489 | 4624 | 4761 | 4900 | 5041 | 5184 | 5329 | 5476 | 5625 | 5776 | 5929 | 6084 | 6241 | 6400 | 6561 | 6724 | 6889 | 7056 | 7225 | 7396 | 7569 | 7744 | 7921 | 8100 | 8281 | 8464 | 8649 | 8836 | 9025 | 9216 | 9409 | 9604 | 9801 |
