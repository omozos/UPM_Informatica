#+TITLE: Tema 5: Ficheros
#+DATE:
#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:2


* Introducción

** Introducción

- Hasta ahora:
  - Introducción de datos desde el *teclado*.
  - Presentación de datos en *pantalla*.
  - *Los datos se pierden* cuando finaliza el programa.
- Ahora vamos a ver:
  - *Almacenamiento de datos* en ficheros que pueden ser leídos por el programa.
  - *Operaciones con ficheros*: apertura, lectura y/o escritura, y cierre.

** Tipo =FILE=

En C se emplea la estructura de datos de tipo =FILE= (declarada en =stdio.h=):

#+BEGIN_SRC C
#include <stdio.h>

int main ()
{
  FILE *pf;

  return 0;
}
#+END_SRC

* Lectura y escritura de ficheros
** Abrir un fichero: =fopen=

=fopen= abre un fichero para para leer y/o escribir en él.

#+BEGIN_SRC C
FILE *fopen (const char *nombre, const char *modo);
#+END_SRC

- =nombre=: nombre del fichero (/debe respetar las normas del sistema operativo en el que se ejecute el programa/).
- =modo=: indica cómo se va a abrir el fichero:

  - lectura: =r=

  - escritura: =w=

  - añadir: =a=

- Devuelve un puntero a una estructura de tipo =FILE= o un puntero nulo =NULL= si se ha producido un error.

** Ejemplo de =fopen=
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
int main ()
{
  FILE *pf;
  // Atención a los separadores en la ruta del fichero, 
  //y a las comillas dobles
  pf = fopen("c:/ejemplos/fichero.txt", "r");

  if (pf == NULL)
  {
    printf("Error al abrir el fichero.\n");
    return -1;
  }
  else
  {
    printf("Fichero abierto correctamente.\n");
    return 0;
  }
}
#+END_SRC

#+RESULTS:


** Cerrar un fichero: =fclose=
=fclose= cierra un fichero previamente abierto con =fopen=

#+BEGIN_SRC C
int fclose (FILE *pf);
#+END_SRC

- El puntero =pf=, de tipo =FILE=, apunta al fichero.
- La función devuelve 0 si el fichero se cierra correctamente o =EOF=[fn:1] si se ha producido un error.

** Escritura de ficheros: =fprintf=

#+BEGIN_SRC C
int fprintf(FILE *stream, const char *format, ...)
#+END_SRC

- Escribe en un fichero con el formato especificado (*igual que =printf=*)

- Devuelve el número de caracteres escritos, o un valor negativo si ocurre un error.


** Ejemplo de =fprintf=
   :PROPERTIES:
   :beamer_opt: plain
   :END:
#+BEGIN_SRC C
#include <stdio.h>

int main(){
  FILE *pf;
  int vals[3] = {1, 2, 3};
  // Abrimos fichero para escritura
  pf = fopen("datos.txt", "w");
  if (pf == NULL) // Si el resultado es NULL mensaje de error 
  {
    printf("Error al abrir el fichero.\n");
    return -1;
  }
  else  // Si ha funcionado, comienza escritura
  {
    fprintf(pf, "%i, %i, %i", vals[0], vals[1], vals[2]);
    fclose(pf); // Cerramos fichero
    return 0;
  }
}
#+END_SRC

#+RESULTS:


** Lectura de ficheros: =fscanf=

#+BEGIN_SRC C
int fscanf(FILE *stream, const char *format, ...)
#+END_SRC

- Lee desde un fichero con el formato especificado (*igual que =scanf=*)

- Devuelve el número de argumentos que han sido leídos y asignados o =EOF= si se detecta el final del fichero.


** Ejemplo de =fscanf=
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int i, n, vals[3];
  FILE *pf;
  
  // Abrimos fichero para lectura
  pf = fopen("datos.txt", "r"); 
  // Leemos datos separados por comas
  n = fscanf(pf, "%i, %i, %i", &vals[0], &vals[1], &vals[2]);
  printf("Se han leído %i argumentos.\n", n);
  fclose(pf);
  // Mostramos en pantalla lo leído
  for (i = 0; i < 3; i++)
  {
    printf("%i\t", vals[i]);
  }

  return(0);
}
#+END_SRC

#+RESULTS:
| Se | han | leído | 3 | argumentos. |
|  1 |   2 |     3 |   |             |



** COMMENT =fgetc= y =fgets=
- La función =fgetc= lee un carácter del fichero y lo *devuelve como =int=*:
  #+BEGIN_SRC C
  int fgetc (FILE *pf);
  #+END_SRC

- La función =fgets= lee una cadena de caracteres del fichero:
  #+BEGIN_SRC C
  char *fgets (char *cadena, int n, FILE *pf);
  #+END_SRC

** COMMENT Ejemplo de =fgetc=
   :PROPERTIES:
   :beamer_opt: plain
   :END:
#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  int i;
  char texto[27];
  FILE *pf;
  // Abrimos fichero para lectura
  pf = fopen("lorem_ipsum.txt", "r");
  // Leemos los 26 primeros caracteres
  for (i = 0; i < 26; i++)
  {
    texto[i] = fgetc(pf);
  }
    
  // Añadimos caracter nulo
  texto[26] = '\0';
  // Mostramos resultado
  printf("%s", texto);
  fclose(pf);
  return(0);
}
#+END_SRC

#+RESULTS:
: Lorem ipsum dolor sit amet

** Lectura de datos con separadores

Si en un fichero hay datos numéricos junto con cadenas de caracteres, hay que usar =[^X]=, donde =X= es el carácter empleado como separador. 

Por ejemplo, para leer datos separados por punto y coma empleamos: =[^;]=

*** Ejemplo
Sea un fichero con el siguiente contenido:
#+BEGIN_QUOTE
Jorge Rodríguez; Profesor; 35; 84.4
#+END_QUOTE

Para leerlo:
#+BEGIN_SRC C
fscanf(pf, "%[^;];%[^;];%d;%f\n",
       nombre, tipo, &edad, &peso);
#+END_SRC

** Marca de final de fichero =EOF=

- Cuando se crea un fichero nuevo con =fopen= se añade automáticamente al final la marca de fin de fichero =EOF= (/end of file/).
- Es una marca escrita al final de un fichero que indica que no hay más datos.
- Cuando se realizan operaciones de lectura o escritura es necesario comprobar si se ha alcanzado esta marca.

** Comprobación de =EOF=
- =feof= detecta el final del fichero: devuelve un valor distinto de cero después de la primera operación que intente leer después de la marca final del fichero. 

#+BEGIN_SRC C
while (feof(pf) == 0)
{
// Operaciones de L/E
}
#+END_SRC

- =fscanf= y =fprintf= devuelven =EOF= cuando alcanzan la marca. Se puede emplear directamente este resultado (sin necesidad de =feof=)
#+BEGIN_SRC C
while(fscanf(...) !=EOF )
{
// Sentencias
}
#+END_SRC

** Ejemplo: número de líneas de un fichero

#+begin_src C
#include <stdio.h>

int main()
{
  int i, nLineas = 0;
  char x; // Variable auxiliar
  FILE *pf;
  pf = fopen("lorem_ipsum.txt", "r");
  // Leemos caracter a caracter
  while (fscanf(pf, "%c", &x) != EOF)
  {
    //Si lo leído es un salto de línea
    if (x == '\n')
    {
      //incrementamos el contador
      ++nLineas;
    }  
  }
  printf("%i", nLineas);
  return 0;
}
#+end_src

#+RESULTS:
: 16

** Ejemplo: lectura de tabla de datos (1)
   :PROPERTIES:
   :beamer_opt: plain
   :END:

   #+begin_src C
#include <stdio.h>
#define N 5
int main ()
{ 
  // Definimos tres vectores cualesquiera
  int v1[N]={-1, 3, 5, 0, 4};
  int v2[N]={4, 9, -8, 2, 3};
  int v3[N]={1, 2, 3, 4, 5};
  int i;
  FILE *pf;
  pf = fopen("columnas.txt", "w");   // Abrimos un fichero para escritura
  for(i = 0; i < N; i++)             // Escribimos línea a línea
  {
    // Separando con punto y coma y salto de línea final
    fprintf(pf, "%d;%d;%d\n", v1[i], v2[i], v3[i]);        
  }    
  fclose(pf);
  return 0;
}
   #+end_src

** Ejemplo: lectura de tabla de datos (2)
   :PROPERTIES:
   :beamer_opt: plain
   :END:

   #+begin_src C
#include <stdio.h>
#define N 5
int main ()
{ // Definimos tres vectores para almacenar datos
  int v1[N], v2[N], v3[N];
  int i = 0;
  FILE *pf;
  pf = fopen("columnas.txt", "r");   // Abrimos el fichero para lectura
  // Leemos y comprobamos EOF
  while (fscanf(pf, "%d;%d;%d\n", &v1[i], &v2[i], &v3[i]) != EOF)  
  {
    // Mostramos en pantalla
    printf("Línea %d: %d \t %d \t %d \n", i + 1, v1[i], v2[i], v3[i]);
    i++;
  }
  fclose(pf);
  return 0;
}
   #+end_src
   
** COMMENT Número de líneas de un fichero
Para detectar (y avanzar) el salto de línea empleamos =%[^\n]\n=
#+begin_src C
#include <stdio.h>

int main()
{
  int i, nLineas = 0;
  char linea[100];
  FILE *pf;
  pf = fopen("lorem_ipsum.txt", "r");
  while (fscanf(pf, "%[^\n]\n", linea) != EOF)
  {
    ++nLineas;
  }
  printf("%i", nLineas); 
  return 0;
}
#+end_src

#+RESULTS:
: 15

* Otras funciones
#+BEGIN_COMMENT
** stdin, stdout, and stderr
- Al ejecutarse un programa de C se abren tres ficheros de forma automática (identificados por tres punteros de tipo =FILE=):

  - =stdin=: entrada estándar del programa (habitualmente el teclado).

  - =stdout=: salida estándar del programa (habitualmente la pantalla).

  - =stderr=: fichero estándar de error.

*** Ejemplo
 #+BEGIN_SRC C
#include <stdio.h>

int main(){
  printf("hello there.\n");
  fprintf(stdout, "hello there.\n");
  return 0;
}
 #+END_SRC

 #+RESULTS:
 | hello | there. |
 | hello | there. |

** COMMENT =stdin=
Entrada estándar del programa (habitualmente el teclado).
#+BEGIN_SRC C
 scanf("%i", &i);
 fscanf(stdin, "%i", &i);
#+END_SRC
#+END_COMMENT

** Movimiento en un fichero

*** =fseek=

 #+BEGIN_SRC C
int fseek(FILE *stream, long int offset, int whence)
 #+END_SRC

 - Desplaza a una posición en un fichero
 - =offset= (long): valor (en bytes) a ir desde =whence=
 - =whence=:
   - =SEEK_SET= Comienzo del fichero
   - =SEEK_CUR= Posición actual
   - =SEEK_END= Final del fichero

** Movimiento en un fichero
*** =ftell=
 #+BEGIN_SRC C
long int ftell(FILE *stream)
 #+END_SRC

 - Devuelve la posición actual respecto del inicio del fichero.
 - Las unidades suelen ser *bytes*.
 - Es una función de tipo =long=

** Ejemplo: nº de bytes de un fichero

#+BEGIN_SRC C
#include <stdio.h>

int main()
{
  long int fsize; // tamaño del fichero
  FILE *pf;
  pf = fopen("datos.txt", "r");
  // Desplaza al final
  fseek(pf, 0, SEEK_END);
  //Almacena la posición
  fsize = ftell(pf);
  printf("El fichero tiene %li bytes.\n", fsize);
  return 0;
}
#+END_SRC

#+RESULTS:
: El fichero tiene 7 bytes.

* Footnotes

[fn:1]=EOF= (/End Of File/) es la marca de final de fichero. Se explica en [[*Marca de final de fichero =EOF=][la diapositiva "Marca de final de fichero"]]
