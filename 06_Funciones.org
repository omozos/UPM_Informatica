#+TITLE: Tema 6: Funciones
#+DATE:
#+STARTUP: beamer
#+SETUPFILE: config.org
#+OPTIONS: H:2

* Definición de función
** ¿Qué es una función?
*** 
Una función es un bloque de código que realiza una tarea determinada a partir de unos datos.
*** Ventajas
 - Permiten *programación estructurada y abstracta*, sin necesidad de conocer
   el detalle de la implementación de una tarea concreta.
 - Mejoran la *legibilidad* del código.
 - Facilitan el *mantenimiento* del programa.
 - Permiten *reutilizar código* de manera eficiente (*DRY!*).

** ¿Cómo se declara una función?
*** Prototipo de una función:
  1. Tipo de valor que devuelve (=int=, =void=, ...)
  2. Nombre de la función (debe ser un identificador válido y *útil*).
  3. Lista de argumentos que emplea, por tipo y nombre (puede estar vacía).

#+BEGIN_SRC C
tipo nombre_funcion(tipo1 arg1, tipo2 arg2, ...);
#+END_SRC
*** Ejemplos
#+BEGIN_SRC C
void printHello(int veces);

float areaTriangulo(float b, float h);
#+END_SRC
** ¿Cómo se define una función?
#+BEGIN_SRC C
// Definicion de la funcion printHello

// No devuelve nada (void)

// Necesita un argumento llamado veces,
// un entero (int), para funcionar.

void printHello(int veces)
{
  int i;
  for (i = 1; i <= veces; i++)
    printf("Hello World!\n");
}
#+END_SRC
** ¿Cómo se define una función?
#+BEGIN_SRC C
// Definicion de la funcion areaTriangulo

// Devuelve un real (float)

// Necesita dos argumentos, b y h, reales.

float areaTriangulo(float b, float h)
{
  float area;

  area = b * h / 2.0;

  return area;
}
#+END_SRC

* Estructura de un programa

** Estructura de un programa
- /Puede/ incluir directivas de inclusión (=include=).
- /Puede/ incluir directivas de sustitución (=define=).
- Declaración de funciones (prototipo).
- Todos los programas tienen al menos una función: =main=.
- Definición de las funciones.


** Directivas de inclusión =include=
Permiten incluir cabeceras (definiciones) procedentes de otros archivos

#+BEGIN_SRC C
//Librerias del sistema
#include <stdio.h>
#include <math.h>
//Librerias propias del desarrollador
#include "myHeader.h"
#+END_SRC


** Directivas de sustitución =define=
- =define= permite definir símbolos que serán sustituidos por su valor.
#+BEGIN_SRC C
#include <stdio.h>
//Habitualmente con mayúsculas
//Atención: SIN signo igual NI punto y coma
#define PI 3.141592
#define N 2

int main()
{
  float r1 = 2.0, r2 = 3.0;
  float area[N];
  area[0] = PI * r1 * r1;
  area[1] = PI * r2 * r2;
  
	printf("Una circunferencia de radio %f", r1);
  printf(" tiene un area de %f\n", area[0]);
  
  printf("Una circunferencia de radio %f", r2);
  printf(" tiene un area de %f\n", area[1]);
  
	return 0;
}
#+END_SRC 

- =undef= elimina la definición del símbolo.
#+BEGIN_SRC C
#undef PI
#+END_SRC


** Declaración y definición de funciones
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
// Prototipo de la función (termina en ;)
void printHello(int n);

// Función main
int main() {
  //Uso de la función en main
  printHello(3);
  return 0;
}
// Definición de la función
void printHello(int n)
{
  int i;
  for (i = 1; i <= n; i++)
    printf("Hello World!\n");
}
#+END_SRC


** Declaración y definición de funciones
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>

// Prototipo de la función (termina en ;)
void printHello(int n);

// Función main
int main() 
{
  //Uso de la función en main
  printHello(3);
  return 0;
}

// Definición de la función, SIN ;
void printHello(int n)
{
  int i;
  for (i = 1; i <= n; i++)
  {
    printf("Hello World!\n");  	
	}
}
#+END_SRC

* Ámbito de una variable

** Variables globales
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>

int globalVar = 3; //Variable global
void funcion_ejemplo(void);

int main()
{
	printf("main (1):\t globalVar es %d.\n", globalVar);
	funcion_ejemplo();
	globalVar = globalVar*2;
	printf("main (2):\t globalVar es %d.\n", globalVar);
	return 0;
}

void funcion_ejemplo(void)
{
	globalVar = globalVar + 1;
	printf("funcion:\t gVar es %d.\n", gVar);
}
#+END_SRC

** Variables locales
   :PROPERTIES:
   :beamer_opt: plain
   :END:
#+BEGIN_SRC C
#include <stdio.h>

void funcion_ejemplo(void);

int main()
{
	int x = 1; // variable local en main
	printf("main (1):\t x es %d.\n", x);
	funcion_ejemplo();
	printf("main (2):\t x es %d.\n", x);
	
	return 0;
}

void funcion_ejemplo(void)
{
	int x = 2; // variable local en foo
	printf("funcion:\t x es %d.\n", x);
}
#+END_SRC

* Funciones que llaman a otras funciones

** Ejemplo
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>
#define PI 3.141592

float eleva3(float x);
float volEsfera(float r);

int main(){
  float radio, vol;
  scanf("%f", &radio);
  vol = volEsfera(radio);
  printf("El volumen es %f", vol);
  return 0;
}
float volEsfera(float r){ //Usa eleva3
  return 4.0/3.0 * PI * eleva3(r);
}
float eleva3(float x){
  return x * x * x;
}
#+END_SRC
** Funciones recursivas
   :PROPERTIES:
   :beamer_opt: plain
   :END:

#+BEGIN_SRC C
#include <stdio.h>

int fact(int n);

int main(){
  int x;
  printf("Indica un número:\n");
  scanf("%d", &x);
  printf("El factorial de %d es %d\n", x, fact(x));
  return 0;
}
int fact(int n){
  int res;
  if (n > 1) // Incluye llamada a si misma
    res = n * fact(n - 1);
  else
    res = 1;
  return res;
}
#+END_SRC

* Funciones en librerías
** Motivación y uso
*** Motivación
Para poder reutilizar las funciones definidas es conveniente alojarlas
en un fichero (o colección de ficheros) que puedan ser incluidos en
otros proyectos.

*** Uso
- Debe existir un (o varios) fichero(s) =.h= (cabecera) y un fichero =.c= (código fuente, implementación de las funciones).
- Se debe usar =#include "nombre_lib.h"= al comienzo del programa.
- Hay que compilar conjuntamente (/en un proyecto/).

** Ejemplo (1)

*** Fichero =myLib.h= (cabecera)
#+BEGIN_SRC C
#define PI 3.141592

float eleva3(float x);
float volEsfera(float r);
#+END_SRC

*** Fichero =myLib.c= (código fuente)
#+BEGIN_SRC C
#include "myLib.h"

float volEsfera(float r){
  return 4.0/3.0 * PI * eleva3(r);
}
float eleva3(float x){
  return x * x * x;
}
#+END_SRC

** Ejemplo (2)

*** Programa principal
#+BEGIN_SRC C
#include <stdio.h>
// Directiva para incluir la librería local
#include "myLib.h" 

int main()
{
  float radio, vol;
  scanf("%f", &radio);
  vol = volEsfera(radio);
  printf("El volumen es %f", vol);
  return 0;
}
#+END_SRC


# Local Variables:
# ispell-local-dictionary: "spanish"
# End:

